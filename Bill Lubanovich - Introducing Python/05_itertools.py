# itertools содержит особые функции итератора.
# Каждая из них возвращает один элемент при каждом вызове из цикла for-in
# и запоминает свое состояние между вызовами.

# chain() проходит по своим аргументам, как если бы они были единым
# итерабельным объектом:

import itertools
for item in itertools.chain([1, 2], ['a', 'b']):
    print(item)                                     # 1 2 a b
print('---')

# cycle() является бесконечным итератором, проходящим в цикле по своим аргументам:

# for item in itertools.cycle([1, 2]):
#     print(item)                         # 1 2 1 2 1 2 1 2 ...
# print('---')

# accumulate() подсчитывает накопленные значения.
# По умолчанию она высчитывает сумму:

for item in itertools.accumulate([1, 2, 3, 4]):
    print(item)                                     # 1 3 6 10
print('---')

# В качестве второго аргумента функции accumulate() вы можете передать функцию,
# и она будет использована вместо сложения.
# Функция должна принимать два аргумента и возвращать одно значение:

def multiply(a, b):
    return a * b

for item in itertools.accumulate([1, 2, 3, 4], multiply):
    print(item)                                             # 1 2 6 24


# В itertools есть еще куча всего
